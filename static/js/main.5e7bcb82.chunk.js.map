{"version":3,"sources":["store/index.js","Components/User/User.js","Components/Userincomments/Userincomments.js","Components/Commentitem/Commentitem.js","Components/Commentitem/ConnectedComment.js","Components/Commentlist/Commentlist.js","Components/Post/Post.js","Components/Post/connectedPost.js","Components/Postlist/Postlist.js","Components/Postlist/ConnectedPostlist.js","Components/App/App.js","Components/App/connectedApp.js","serviceWorker.js","index.js"],"names":["BASE_URL","initialState","listWithUsersCommentsPosts","filteredList","isLoading","isLoaded","hasError","store","createStore","state","arguments","length","undefined","action","type","_objectSpread","posts","Object","toConsumableArray","sort","a","b","title","reverse","filter","item","id","payload","map","post","comments","comment","applyMiddleware","thunk","User","_ref","user","name","username","email","address","react_default","createElement","className","city","Userincomment","Fragment","CommentItem","removeComment","body","Userincomments","onClick","ConnectedComment","connect","dispatch","Commentitem","Commentlist","Commentitem_ConnectedComment","key","Post","removePostItem","Components_User_User","Components_Commentlist_Commentlist","ConnectedPost","Postlist","sortByTitle","sortByTitleReverse","console","log","connectedPost","connectedPostlist","App","loadData","_callee","regenerator_default","wrap","_context","prev","next","_this","props","stop","_this$props","this","disabled","ConnectedPostlist","React","Component","ConnectedApp","Promise","all","fetch","concat","then","responses","respons","json","_ref2","slicedToArray","postsDate","usersDate","commentsDate","find","userId","postId","handleSeccess","catch","Boolean","window","location","hostname","match","ReactDOM","render","es","connectedApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"25BAGA,IAAMA,EAAW,wCAkEXC,EAAe,CACnBC,2BAA4B,GAC5BC,aAAc,GACdC,WAAW,EACXC,UAAU,EACVC,UAAU,GAoEGC,EAFDC,YA/DE,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBT,EAAcY,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACb,IA1EkB,gBA2EhB,OAAAC,EAAA,GACKN,EADL,CAEEL,WAAW,IAEf,IA9EmB,iBA+EjB,OAAAW,EAAA,GACKN,EADL,CAEEH,UAAU,EACVD,UAAU,EACVD,WAAW,EACXF,2BAA4BW,EAAOG,MACnCb,aAAcU,EAAOG,QAEzB,IAtFiB,eAuFf,OAAAD,EAAA,GACKN,EADL,CAEEL,WAAW,EACXE,UAAU,IAEd,IA3FkB,gBA4FhB,OAAAS,EAAA,GACKN,EADL,CAEEN,aAAcc,OAAAC,EAAA,EAAAD,CAAIR,EAAMP,4BACrBiB,KAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAQD,EAAEC,MAAQ,GAAK,MAEhD,IAhG0B,wBAiGxB,OAAAP,EAAA,GACKN,EADL,CAEEN,aAAcc,OAAAC,EAAA,EAAAD,CAAIR,EAAMP,4BACrBiB,KAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAQD,EAAEC,MAAQ,GAAK,IAAIC,YAEpD,IArGgB,cAsGd,OAAAR,EAAA,GACKN,EADL,CAEEP,2BAA4Be,OAAAC,EAAA,EAAAD,CAAIR,EAAMP,4BACnCsB,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOb,EAAOc,UACrCxB,aAAcc,OAAAC,EAAA,EAAAD,CAAIR,EAAMN,cACrBqB,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOb,EAAOc,YAEzC,IA5GmB,iBA6GjB,OAAAZ,EAAA,GACKN,EADL,CAEEP,2BAA4Be,OAAAC,EAAA,EAAAD,CAAIR,EAAMP,4BACnC0B,IAAI,SAAAC,GAAI,OAAAd,EAAA,GACJc,EADI,CAEPC,SAAUb,OAAAC,EAAA,EAAAD,CAAIY,EAAKC,UAChBN,OAAO,SAAAO,GAAO,OAAIA,EAAQL,KAAOb,EAAOc,cAE/CxB,aAAcc,OAAAC,EAAA,EAAAD,CAAIR,EAAMN,cACrByB,IAAI,SAAAC,GAAI,OAAAd,EAAA,GACJc,EADI,CAEPC,SAAUb,OAAAC,EAAA,EAAAD,CAAIY,EAAKC,UAChBN,OAAO,SAAAO,GAAO,OAAIA,EAAQL,KAAOb,EAAOc,gBAGnD,QACE,OAAOlB,IAIsBuB,YAAgBC,iGCrGpCC,MAnCf,SAAAC,GAAwB,IAARC,EAAQD,EAARC,KAGZC,EACED,EADFC,KAAMC,EACJF,EADIE,SAAUC,EACdH,EADcG,MAAOC,EACrBJ,EADqBI,QAGzB,OACEC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,cACbF,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,cAAb,QAEGN,GAEHI,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,kBAAb,WAEGL,GAEHG,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,eAAb,SAEGJ,GAEHE,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,cAAb,QAEGH,EAAQI,QCbFC,eATO,SAAAV,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACpBK,EAAArB,EAAAsB,cAAAD,EAAArB,EAAA0B,SAAA,KACEL,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,eAAb,SAEGP,MCuBQW,EA1BK,SAAAZ,GAAoC,IAAjCT,EAAiCS,EAAjCT,GAAIK,EAA6BI,EAA7BJ,QAASiB,EAAoBb,EAApBa,cAC1BC,EAAgBlB,EAAhBkB,KAAMV,EAAUR,EAAVQ,MAEd,OACEE,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBACbF,EAAArB,EAAAsB,cAAA,MAAIC,UAAU,gBAAgBM,GAC9BR,EAAArB,EAAAsB,cAACQ,EAAD,CAAed,KAAMG,IACrBE,EAAArB,EAAAsB,cAAA,UACEC,UAAU,aACV7B,KAAK,SACLqC,QAAS,kBAAMH,EAActB,KAE5B,YCPM0B,EAFUC,YAAQ,KAJP,SAAAC,GAAQ,MAAK,CACrCN,cAAe,SAAAtB,GAAE,OAAI4B,EJkCoB,CACzCxC,KA7BqB,iBA8BrBa,QIpC4CD,OAGrB2B,CAAiCE,GCkB3CC,EArBK,SAAArB,GAAA,IAAGL,EAAHK,EAAGL,SAAH,OAClBW,EAAArB,EAAAsB,cAAA,MAAIC,UAAU,iBACXb,EACEF,IAAI,SAAAG,GAAO,OACVU,EAAArB,EAAAsB,cAACe,EAAD,CACE/B,GAAIK,EAAQL,GACZK,QAASA,EACT2B,IAAK3B,EAAQL,SC4BRiC,MAlCf,SAAAxB,GAA4C,IAA5BT,EAA4BS,EAA5BT,GAAIG,EAAwBM,EAAxBN,KAAM+B,EAAkBzB,EAAlByB,eAEtBxB,EACEP,EADFO,KAAMN,EACJD,EADIC,SAAUR,EACdO,EADcP,MAAO2B,EACrBpB,EADqBoB,KAEzB,OACER,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,QACbF,EAAArB,EAAAsB,cAAA,UACEC,UAAU,sBACV7B,KAAK,SACLqC,QAAS,kBAAMS,EAAelC,KAE7B,UAEHe,EAAArB,EAAAsB,cAAA,MAAIC,UAAU,eAAerB,GAC7BmB,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,cAAcM,GAC3BR,EAAArB,EAAAsB,cAACmB,EAAD,CAAMzB,KAAMA,IACZK,EAAArB,EAAAsB,cAACoB,EAAD,CAAahC,SAAUA,MCZdiC,EAFOV,YAAQ,KAJJ,SAAAC,GAAQ,MAAK,CACrCM,eAAgB,SAAAlC,GAAE,OAAI4B,EP6Ba,CACnCxC,KAzBkB,cA0BlBa,QO/B0CD,OAGtB2B,CAAiCM,GCgCxCK,EAnCE,SAAA7B,GAEX,IADJhC,EACIgC,EADJhC,aAAcE,EACV8B,EADU9B,SAAU4D,EACpB9B,EADoB8B,YAAaC,EACjC/B,EADiC+B,mBAGrC,OADAC,QAAQC,IAAIjE,GAEVsC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,aACZtC,GACCoC,EAAArB,EAAAsB,cAAAD,EAAArB,EAAA0B,SAAA,KACEL,EAAArB,EAAAsB,cAAA,UACE5B,KAAK,SACLqC,QAASc,GAFX,YAMAxB,EAAArB,EAAAsB,cAAA,UACE5B,KAAK,SACLqC,QAASe,GAFX,aAQH/D,EACEyB,IAAI,SAAAC,GAAI,OAAIY,EAAArB,EAAAsB,cAAC2B,EAAD,CAAe3C,GAAIG,EAAKH,GAAIG,KAAMA,EAAM6B,IAAK7B,EAAKH,SCZxD4C,EAFWjB,YAVF,SAAA5C,GAAK,MAAK,CAChCN,aAAcM,EAAMN,aACpBE,SAAUI,EAAMJ,WAGQ,SAAAiD,GAAQ,MAAK,CACrCW,YAAa,kBAAMX,ETgBa,CAChCxC,KAnBoB,mBSGpBoD,mBAAoB,kBAAMZ,ETmBa,CACvCxC,KAtB4B,6BSKJuC,CAA4CW,GCoCvDO,oNA7CbC,8BAAW,SAAAC,IAAA,OAAAC,EAAAtD,EAAAuD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACHC,EAAKC,MAAMR,WADR,wBAAAI,EAAAK,SAAAR,8EAIF,IAAAS,EAGHC,KAAKH,MADP5E,EAFK8E,EAEL9E,UAAWC,EAFN6E,EAEM7E,SAGb,OALO6E,EAEgB5E,SAKnBmC,EAAArB,EAAAsB,cAAAD,EAAArB,EAAA0B,SAAA,KACEL,EAAArB,EAAAsB,cAAA,6BACAD,EAAArB,EAAAsB,cAAA,UACE5B,KAAK,SACLqC,QAASgC,KAAKX,SACdY,SAAUhF,GAETA,EACG,aACA,WAOVqC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,OACbF,EAAArB,EAAAsB,cAAA,4BACErC,GACAoC,EAAArB,EAAAsB,cAAA,UACE5B,KAAK,SACLqC,QAASgC,KAAKX,SACdY,SAAUhF,GAETA,EACG,aACA,QAGRqC,EAAArB,EAAAsB,cAAC2C,EAAD,cAzCUC,IAAMC,YCYTC,EAFMnC,YAVG,SAAA5C,GAAK,MAAK,CAChCL,UAAWK,EAAML,UACjBC,SAAUI,EAAMJ,SAChBC,SAAUG,EAAMH,WAGQ,SAAAgD,GAAQ,MAAK,CACrCkB,SAAU,kBAAMlB,EXiCY,SAACA,GAG7B,OAFAA,EAhC0B,CAC1BxC,KAToB,kBA0Cb2E,QAAQC,IAAI,CACjBC,MAAK,GAAAC,OAAI5F,EAAJ,UACL2F,MAAK,GAAAC,OAAI5F,EAAJ,UACL2F,MAAK,GAAAC,OAAI5F,EAAJ,eAEJ6F,KAAK,SAAAC,GAAS,OAAIL,QAAQC,IAAII,EAAUlE,IAAI,SAAAmE,GAAO,OAAIA,EAAQC,YAC/DH,KAAK,SAAA1D,GAA0C,IAAA8D,EAAAhF,OAAAiF,EAAA,EAAAjF,CAAAkB,EAAA,GAAxCgE,EAAwCF,EAAA,GAA7BG,EAA6BH,EAAA,GAAlBI,EAAkBJ,EAAA,GACxCjF,EAAQmF,EAAUvE,IACtB,SAAAC,GAAI,OAAAd,EAAA,GACCc,EADD,CAEFO,KAAMgE,EAAUE,KAAK,SAAAlE,GAAI,OAAIA,EAAKV,KAAOG,EAAK0E,SAC9CzE,SAAUuE,EAAa7E,OACrB,SAAAO,GAAO,OAAIA,EAAQyE,SAAW3E,EAAKH,SAIzCyC,QAAQC,IAAIpD,GACZsC,EA/CgB,SAAAtC,GAAK,MAAK,CAC9BF,KAZqB,iBAarBE,SA6CayF,CAAczF,MAExB0F,MAAM,kBAAMpD,EA5CU,CACzBxC,KAhBmB,wBWOAuC,CAA4CkB,GCF7CoC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCVNC,IAASC,OACPxE,EAAArB,EAAAsB,cAACwE,EAAA,EAAD,CAAU3G,MAAOA,GACfkC,EAAArB,EAAAsB,cAACyE,EAAD,OAEAC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAC4B,GAClCA,EAAaC","file":"static/js/main.5e7bcb82.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst START_LOADING = 'START_LOADING';\nconst HANDLE_SECCESS = 'HANDLE_SUCCESS';\nconst HANDLE_ERROR = 'HANDLE_ERORR';\nconst SORT_BY_TITLE = 'SORT_BY_TITLE';\nconst SORT_BY_TITLE_REVERSE = 'SORT_BY_TITLE_REVERSE';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nconst startLoading = () => ({\n  type: START_LOADING,\n});\n\nconst handleSeccess = posts => ({\n  type: HANDLE_SECCESS,\n  posts,\n});\n\nconst handleError = () => ({\n  type: HANDLE_ERROR,\n});\n\nexport const sortByTitle = () => ({\n  type: SORT_BY_TITLE,\n});\n\nexport const sortByTitleReverse = () => ({\n  type: SORT_BY_TITLE_REVERSE,\n});\n\nexport const removePost = postId => ({\n  type: REMOVE_POST,\n  payload: postId,\n});\n\nexport const removeComment = commentId => ({\n  type: REMOVE_COMMENT,\n  payload: commentId,\n});\n\nexport const loadData = () => (dispatch) => {\n  dispatch(startLoading());\n\n  return Promise.all([\n    fetch(`${BASE_URL}posts`),\n    fetch(`${BASE_URL}users`),\n    fetch(`${BASE_URL}comments`),\n  ])\n    .then(responses => Promise.all(responses.map(respons => respons.json())))\n    .then(([postsDate, usersDate, commentsDate]) => {\n      const posts = postsDate.map(\n        post => ({\n          ...post,\n          user: usersDate.find(user => user.id === post.userId),\n          comments: commentsDate.filter(\n            comment => comment.postId === post.id\n          ),\n        })\n      );\n      console.log(posts);\n      dispatch(handleSeccess(posts));\n    })\n    .catch(() => dispatch(handleError()));\n};\n\nconst initialState = {\n  listWithUsersCommentsPosts: [],\n  filteredList: [],\n  isLoading: false,\n  isLoaded: false,\n  hasError: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case HANDLE_SECCESS:\n      return {\n        ...state,\n        hasError: false,\n        isLoaded: true,\n        isLoading: false,\n        listWithUsersCommentsPosts: action.posts,\n        filteredList: action.posts,\n      };\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n    case SORT_BY_TITLE:\n      return {\n        ...state,\n        filteredList: [...state.listWithUsersCommentsPosts]\n          .sort((a, b) => (a.title > b.title ? 1 : -1)),\n      };\n    case SORT_BY_TITLE_REVERSE:\n      return {\n        ...state,\n        filteredList: [...state.listWithUsersCommentsPosts]\n          .sort((a, b) => (a.title > b.title ? 1 : -1)).reverse(),\n      };\n    case REMOVE_POST:\n      return {\n        ...state,\n        listWithUsersCommentsPosts: [...state.listWithUsersCommentsPosts]\n          .filter(item => item.id !== action.payload),\n        filteredList: [...state.filteredList]\n          .filter(item => item.id !== action.payload),\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        listWithUsersCommentsPosts: [...state.listWithUsersCommentsPosts]\n          .map(post => ({\n            ...post,\n            comments: [...post.comments]\n              .filter(comment => comment.id !== action.payload),\n          })),\n        filteredList: [...state.filteredList]\n          .map(post => ({\n            ...post,\n            comments: [...post.comments]\n              .filter(comment => comment.id !== action.payload),\n          })),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './User.css';\n\nfunction User({ user }) {\n  const {\n    // eslint-disable-next-line no-shadow\n    name, username, email, address,\n  } = user;\n\n  return (\n    <div className=\"post__user\">\n      <p className=\"user__name\">\n        Name:\n        {name}\n      </p>\n      <p className=\"user__username\">\n        Userame:\n        {username}\n      </p>\n      <p className=\"user__email\">\n        Email:\n        {email}\n      </p>\n      <p className=\"user__city\">\n        City:\n        {address.city}\n      </p>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  name: PropTypes.string,\n  username: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.object,\n}.isRequaired;\n\nexport default User;\n","import React from 'react';\n// import './Userincomments.css';\n// import PropTypes from 'prop-types';\n\nconst Userincomment = ({ user }) => (\n  <>\n    <p className=\"user__email\">\n    Email:\n      {user}\n    </p>\n  </>\n);\n\nexport default Userincomment;\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\nimport Userincomment from '../Userincomments/Userincomments';\n\nconst CommentItem = ({ id, comment, removeComment }) => {\n  const { body, email } = comment;\n\n  return (\n    <div className=\"comment-item\">\n      <li className=\"comment-text\">{body}</li>\n      <Userincomment user={email} />\n      <button\n        className=\"btn-remove\"\n        type=\"button\"\n        onClick={() => removeComment(id)}\n      >\n        {'\\u2716'}\n      </button>\n    </div>\n  );\n};\n\nCommentItem.propTypes = {\n  id: PropTypes.number,\n  comment: PropTypes.shape({\n    body: PropTypes.string,\n    email: PropTypes.string,\n  }),\n}.isRequaired;\n\nexport default CommentItem;\n","import { connect } from 'react-redux';\nimport { removeComment } from '../../store/index';\nimport Commentitem from './Commentitem';\n\nconst mapMethodsToProps = dispatch => ({\n  removeComment: id => dispatch(removeComment(id)),\n});\n\nconst ConnectedComment = connect(null, mapMethodsToProps)(Commentitem);\n\nexport default ConnectedComment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Commentlist.css';\nimport ConnectedComment from '../Commentitem/ConnectedComment';\n\nconst Commentlist = ({ comments }) => (\n  <ul className=\"comments-list\">\n    {comments\n      .map(comment => (\n        <ConnectedComment\n          id={comment.id}\n          comment={comment}\n          key={comment.id}\n        />\n      ))\n    }\n  </ul>\n);\n\nCommentlist.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string,\n    email: PropTypes.string,\n  })),\n}.isRequaired;\nexport default Commentlist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Post.css';\nimport User from '../User/User';\nimport Commentlist from '../Commentlist/Commentlist';\n\nfunction Post({ id, post, removePostItem }) {\n  const {\n    user, comments, title, body,\n  } = post;\n  return (\n    <div className=\"post\">\n      <button\n        className=\"btn-remove btn-post\"\n        type=\"button\"\n        onClick={() => removePostItem(id)}\n      >\n        {'\\u2716'}\n      </button>\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__body\">{body}</p>\n      <User user={user} />\n      <Commentlist comments={comments} />\n    </div>\n  );\n}\n\nPost.propTypes = {\n  id: PropTypes.number,\n  removePostItem: PropTypes.func,\n  post: PropTypes.shape({\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      username: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.object,\n    }),\n  }),\n}.isRequaired;\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport { removePost } from '../../store/index';\nimport Post from './Post';\n\nconst mapMethodsToProps = dispatch => ({\n  removePostItem: id => dispatch(removePost(id)),\n});\n\nconst ConnectedPost = connect(null, mapMethodsToProps)(Post);\n\nexport default ConnectedPost;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Postlist.css';\nimport ConnectedPost from '../Post/connectedPost';\n\nconst Postlist = ({\n  filteredList, isLoaded, sortByTitle, sortByTitleReverse,\n}) => {\n  console.log(filteredList);\n  return (\n    <div className=\"post-list\">\n      {isLoaded && (\n        <>\n          <button\n            type=\"button\"\n            onClick={sortByTitle}\n          >\n          Sort A-Z\n          </button>\n          <button\n            type=\"button\"\n            onClick={sortByTitleReverse}\n          >\n          Sort Z-A\n          </button>\n        </>\n      )}\n      {filteredList\n        .map(post => <ConnectedPost id={post.id} post={post} key={post.id} />)}\n    </div>\n  );\n};\n\nPostlist.propTypes = {\n  filteredList: PropTypes.arrayOf(PropTypes.object),\n  isLoaded: PropTypes.bool,\n  sortByTitle: PropTypes.func,\n  sortByTitleReverse: PropTypes.func,\n}.isRequaired;\n\nexport default Postlist;\n","import { connect } from 'react-redux';\nimport Postlist from './Postlist';\nimport { sortByTitle, sortByTitleReverse } from '../../store/index';\n\nconst mapStateToProps = state => ({\n  filteredList: state.filteredList,\n  isLoaded: state.isLoaded,\n});\n\nconst mapMethodsToProps = dispatch => ({\n  sortByTitle: () => dispatch(sortByTitle()),\n  sortByTitleReverse: () => dispatch(sortByTitleReverse()),\n});\n\nconst connectedPostlist = connect(mapStateToProps, mapMethodsToProps)(Postlist);\n\nexport default connectedPostlist;\n","import React from 'react';\nimport ConnectedPostlist from '../Postlist/ConnectedPostlist';\nimport './App.css';\n\nclass App extends React.Component {\n  loadData = async() => {\n    await this.props.loadData();\n  }\n\n  render() {\n    const {\n      isLoading, isLoaded, hasError,\n    } = this.props;\n\n    if (hasError) {\n      return (\n        <>\n          <p>Some problems...</p>\n          <button\n            type=\"button\"\n            onClick={this.loadData}\n            disabled={isLoading}\n          >\n            {isLoading\n              ? 'Loading...'\n              : 'Reload'}\n          </button>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>List of Posts</h1>\n        {!isLoaded && (\n          <button\n            type=\"button\"\n            onClick={this.loadData}\n            disabled={isLoading}\n          >\n            {isLoading\n              ? 'Loading...'\n              : 'Load'}\n          </button>\n        )}\n        <ConnectedPostlist />\n      </div>\n    );\n  }\n}\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { loadData } from '../../store/index';\n\nconst mapStateToProps = state => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  hasError: state.hasError,\n});\n\nconst mapMethodsToprops = dispatch => ({\n  loadData: () => dispatch(loadData()),\n});\n\nconst ConnectedApp = connect(mapStateToProps, mapMethodsToprops)(App);\n\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport './index.css';\nimport ConnectedApp from './Components/App/connectedApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedApp />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}